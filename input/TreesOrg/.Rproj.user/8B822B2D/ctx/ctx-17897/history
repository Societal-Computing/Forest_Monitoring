# Install and load the required packages
install.packages("httr")
install.packages("jsonlite")
library(httr)
library(jsonlite)
# Fetch the data from the API
url <- "https://trees.org/wp-json/trees/v1/project/posts"
response <- GET(url)
# Check if the request was successful
if (status_code(response) == 200) {
# Parse the JSON content
data <- content(response, as = "parsed", type = "application/json")
# Extract the 'data' part which is a list of 86 elements
data_list <- data$data
# Convert the list to a dataframe
df <- do.call(rbind, lapply(data_list, as.data.frame))
# Print the first few rows of the dataframe
print(head(df))
} else {
print(paste("Failed to fetch data. Status code:", status_code(response)))
}
View(data_list)
# Install and load the required packages
install.packages("httr")
install.packages("jsonlite")
library(httr)
library(jsonlite)
# Fetch the data from the API
url <- "https://trees.org/wp-json/trees/v1/project/posts"
response <- GET(url)
# Check if the request was successful
if (status_code(response) == 200) {
# Parse the JSON content
data <- content(response, as = "parsed", type = "application/json")
# Extract the 'data' part which is a list of 86 elements
data_list <- data$data
# Convert the list to a dataframe
df <- do.call(rbind, lapply(data_list, as.data.frame))
# Print the first few rows of the dataframe
print(head(df))
} else {
print(paste("Failed to fetch data. Status code:", status_code(response)))
}
install.packages("httr")
install.packages("jsonlite")
library(httr)
library(jsonlite)
library(tidyverse)
# Fetch the data from the API
url <- "https://trees.org/wp-json/trees/v1/project/posts"
response <- GET(url)
# Check if the request was successful
if (status_code(response) == 200) {
# Parse the JSON content
data <- content(response, as = "parsed", type = "application/json")
# Extract the 'data' part which is a list of 86 elements
data_list <- data$data
# Convert the list of lists to a dataframe
df <- bind_rows(lapply(data_list, as_tibble))
# Print the first few rows of the dataframe
print(head(df))
} else {
print(paste("Failed to fetch data. Status code:", status_code(response)))
}
View(data)
# Check if the request was successful
if (status_code(response) == 200) {
# Parse the JSON content
data <- content(response, as = "parsed", type = "application/json")
# Extract the 'data' part which is a list of 86 elements
data_list <- data$data
# Convert the list of lists to a dataframe
df <- bind_rows(lapply(data_list, as_tibble))
# Print the first few rows of the dataframe
print(head(df))
} else {
print(paste("Failed to fetch data. Status code:", status_code(response)))
}
library(httr)
library(jsonlite)
library(tidyverse)
# Function to flatten lists within lists
flatten_list <- function(lst) {
if (is.list(lst)) {
unlist(lapply(lst, function(x) {
if (is.list(x)) {
paste(unlist(x), collapse = ", ")
} else {
x
}
}))
} else {
lst
}
}
# Fetch the data from the API
url <- "https://trees.org/wp-json/trees/v1/project/posts"
response <- GET(url)
# Check if the request was successful
if (status_code(response) == 200) {
# Parse the JSON content
data <- content(response, as = "parsed", type = "application/json")
# Extract the 'data' part which is a list of 86 elements
data_list <- data$data
# Flatten each element of the list and convert to a dataframe
df <- bind_rows(lapply(data_list, function(x) {
as_tibble(flatten_list(x))
}))
# Print the first few rows of the dataframe
print(head(df))
} else {
print(paste("Failed to fetch data. Status code:", status_code(response)))
}
View(df)
# Install and load the required packages
install.packages("httr")
install.packages("jsonlite")
install.packages("dplyr")
install.packages("purrr")
library(httr)
library(jsonlite)
library(dplyr)
library(purrr)
# Fetch the data from the API
url <- "https://trees.org/wp-json/trees/v1/project/posts"
response <- GET(url)
# Check if the request was successful
if (status_code(response) == 200) {
# Parse the JSON content
data <- content(response, as = "parsed", type = "application/json")
# Extract the 'data' part which is a list of 86 elements
data_list <- data$data
# Convert the list of lists to a dataframe
df <- map_dfr(data_list, function(x) {
# Flatten each sub-list
x <- map(x, ~ if (is.list(.x)) paste(unlist(.x), collapse = ", ") else .x)
as.data.frame(x, stringsAsFactors = FALSE)
})
# Print the first few rows of the dataframe
print(head(df))
} else {
print(paste("Failed to fetch data. Status code:", status_code(response)))
}

# Install and load necessary packages
install.packages("httr")
install.packages("jsonlite")
library(httr)
library(jsonlite)
# Base URL
base_url <- 'https://services8.arcgis.com/pKd0yHtOd6niWQzj/arcgis/rest/services/AllProjects_unrefined_Fri13/FeatureServer/146/query'
# Parameters
params <- list(
f = 'json',
returnIdsOnly = 'false',
returnCountOnly = 'false',
orderByFields = '',
outSR = '102100',
returnGeometry = 'true',
spatialRel = 'esriSpatialRelIntersects',
where = "Project_Status IN ('Complete','Planted/Reporting','OTP Reporting','Monitoring & Maintenance')"
)
# Sending GET request
response <- GET(url = base_url, query = params)
# Check response
if (status_code(response) == 200) {
data <- content(response, as = "parsed", type = "application/json")
# Convert to dataframe
df <- as.data.frame(data$features)
# Print the dataframe
print(df)
} else {
print(paste("Failed to retrieve data:", status_code(response)))
}
View(df)
View(data)
View(df)
# Install and load necessary packages
install.packages("httr")
install.packages("jsonlite")
install.packages("tidyverse")
library(httr)
library(jsonlite)
library(tidyverse)
# Base URL
base_url <- 'https://services8.arcgis.com/pKd0yHtOd6niWQzj/arcgis/rest/services/AllProjects_unrefined_Fri13/FeatureServer/146/query'
# Parameters
params <- list(
f = 'json',
returnIdsOnly = 'false',
returnCountOnly = 'false',
orderByFields = '',
outSR = '102100',
returnGeometry = 'true',
spatialRel = 'esriSpatialRelIntersects',
where = "Project_Status IN ('Complete','Planted/Reporting','OTP Reporting','Monitoring & Maintenance')"
)
# Sending GET request
response <- GET(url = base_url, query = params)
# Check response
if (status_code(response) == 200) {
data <- content(response, as = "parsed", type = "application/json")
# Extract the attributes of the features and convert to dataframe
df <- as.data.frame(do.call(rbind, lapply(data$features, function(x) x$attributes)))
# Pivot the dataframe longer
df_long <- df %>%
pivot_longer(cols = everything(), names_to = "Attribute", values_to = "Value")
# Print the transformed dataframe
print(df_long)
} else {
print(paste("Failed to retrieve data:", status_code(response)))
}
# Install and load necessary packages
install.packages("httr")
install.packages("jsonlite")
install.packages("tidyverse")
library(httr)
library(jsonlite)
library(tidyverse)
# Base URL
base_url <- 'https://services8.arcgis.com/pKd0yHtOd6niWQzj/arcgis/rest/services/AllProjects_unrefined_Fri13/FeatureServer/146/query'
# Parameters
params <- list(
f = 'json',
returnIdsOnly = 'false',
returnCountOnly = 'false',
orderByFields = '',
outSR = '102100',
returnGeometry = 'true',
spatialRel = 'esriSpatialRelIntersects',
where = "Project_Status IN ('Complete','Planted/Reporting','OTP Reporting','Monitoring & Maintenance')"
)
# Sending GET request
response <- GET(url = base_url, query = params)
# Check response
if (status_code(response) == 200) {
data <- content(response, as = "parsed", type = "application/json")
# Extract the attributes of the features and convert to dataframe
df <- as.data.frame(do.call(rbind, lapply(data$features, function(x) x$attributes)))
# Pivot the dataframe longer
df_long <- df %>%
pivot_longer(cols = everything(), names_to = "Attribute", values_to = "Value")
# Print the transformed dataframe
print(df_long)
} else {
print(paste("Failed to retrieve data:", status_code(response)))
}
View(df_long)
View(params)
View(data)
View(df_long)
View(data)
# Install and load necessary packages
install.packages("httr")
install.packages("jsonlite")
install.packages("tidyverse")
library(httr)
library(jsonlite)
library(tidyverse)
# Base URL
base_url <- 'https://services8.arcgis.com/pKd0yHtOd6niWQzj/arcgis/rest/services/AllProjects_unrefined_Fri13/FeatureServer/146/query'
# Parameters
params <- list(
f = 'json',
returnIdsOnly = 'false',
returnCountOnly = 'false',
orderByFields = '',
outSR = '102100',
returnGeometry = 'true',
spatialRel = 'esriSpatialRelIntersects',
where = "Project_Status IN ('Complete','Planted/Reporting','OTP Reporting','Monitoring & Maintenance')"
)
# Sending GET request
response <- GET(url = base_url, query = params)
# Check response
if (status_code(response) == 200) {
data <- content(response, as = "parsed", type = "application/json")
# Extract features
features <- data$features
# Extract attributes and geometry
extract_features <- function(feature) {
attributes <- feature$attributes
geometry <- feature$geometry
combined <- c(attributes, geometry)
return(combined)
}
# Apply the extraction function to all features
extracted_data <- lapply(features, extract_features)
# Convert the list to a dataframe
df <- do.call(rbind, lapply(extracted_data, as.data.frame))
# Print the dataframe
print(df)
} else {
print(paste("Failed to retrieve data:", status_code(response)))
}
View(df_long)
View(df)
View(features)
# Install and load necessary packages
install.packages("httr")
install.packages("jsonlite")
install.packages("tidyverse")
library(httr)
library(jsonlite)
library(tidyverse)
# Base URL
base_url <- 'https://services8.arcgis.com/pKd0yHtOd6niWQzj/arcgis/rest/services/AllProjects_unrefined_Fri13/FeatureServer/146/query'
# Parameters
params <- list(
f = 'json',
returnIdsOnly = 'false',
returnCountOnly = 'false',
orderByFields = '',
outSR = '102100',
returnGeometry = 'true',
spatialRel = 'esriSpatialRelIntersects',
where = "Project_Status IN ('Complete','Planted/Reporting','OTP Reporting','Monitoring & Maintenance')"
)
# Sending GET request
response <- GET(url = base_url, query = params)
# Check response
if (status_code(response) == 200) {
data <- content(response, as = "parsed", type = "application/json")
# Extract features
features <- data$features
# Extract attributes and geometry
extract_features <- function(feature) {
attributes <- feature$attributes
geometry <- feature$geometry
combined <- c(attributes, geometry)
return(combined)
}
# Apply the extraction function to all features
extracted_data <- lapply(features, extract_features)
# Convert the list to a dataframe
df <- do.call(rbind, lapply(extracted_data, as.data.frame))
# Select the required columns and rename them
df_cleaned <- df %>%
select(Project_Title, x, y) %>%
rename(Longitude = x, Latitude = y)
# Print the cleaned dataframe
print(df_cleaned)
} else {
print(paste("Failed to retrieve data:", status_code(response)))
}
# Install and load necessary packages
install.packages("httr")
install.packages("jsonlite")
install.packages("tidyverse")
library(httr)
library(jsonlite)
library(tidyverse)
# Base URL
base_url <- 'https://services8.arcgis.com/pKd0yHtOd6niWQzj/arcgis/rest/services/AllProjects_unrefined_Fri13/FeatureServer/146/query'
# Parameters
params <- list(
f = 'json',
returnIdsOnly = 'false',
returnCountOnly = 'false',
orderByFields = '',
outSR = '102100',
returnGeometry = 'true',
spatialRel = 'esriSpatialRelIntersects',
where = "Project_Status IN ('Complete','Planted/Reporting','OTP Reporting','Monitoring & Maintenance')"
)
# Sending GET request
response <- GET(url = base_url, query = params)
# Check response
if (status_code(response) == 200) {
data <- content(response, as = "parsed", type = "application/json")
# Extract features
features <- data$features
# Extract attributes and geometry
extract_features <- function(feature) {
attributes <- feature$attributes
geometry <- feature$geometry
combined <- data.frame(
Project_Title = attributes$Project_Title,
Longitude = geometry$x,
Latitude = geometry$y,
stringsAsFactors = FALSE
)
return(combined)
}
# Apply the extraction function to all features and combine the results into a dataframe
extracted_data <- do.call(rbind, lapply(features, extract_features))
# Print the cleaned dataframe
print(extracted_data)
} else {
print(paste("Failed to retrieve data:", status_code(response)))
}
# Install and load necessary packages
install.packages("httr")
install.packages("jsonlite")
install.packages("tidyverse")
library(httr)
library(jsonlite)
library(tidyverse)
# Base URL
base_url <- 'https://services8.arcgis.com/pKd0yHtOd6niWQzj/arcgis/rest/services/AllProjects_unrefined_Fri13/FeatureServer/146/query'
# Parameters
params <- list(
f = 'json',
returnIdsOnly = 'false',
returnCountOnly = 'false',
orderByFields = '',
outSR = '102100',
returnGeometry = 'true',
spatialRel = 'esriSpatialRelIntersects',
where = "Project_Status IN ('Complete','Planted/Reporting','OTP Reporting','Monitoring & Maintenance')"
)
# Sending GET request
response <- GET(url = base_url, query = params)
# Check response
if (status_code(response) == 200) {
data <- content(response, as = "parsed", type = "application/json")
# Extract features
features <- data$features
# Extract attributes and geometry
extract_features <- function(feature) {
attributes <- feature$attributes
geometry <- feature$geometry
combined <- data.frame(
Project_Title = attributes$Project_Title,
Longitude = geometry$x,
Latitude = geometry$y,
stringsAsFactors = FALSE
)
return(combined)
}
# Apply the extraction function to all features and combine the results into a dataframe
extracted_data <- do.call(rbind, lapply(features, extract_features))
# Print the cleaned dataframe
print(extracted_data)
} else {
print(paste("Failed to retrieve data:", status_code(response)))
}
